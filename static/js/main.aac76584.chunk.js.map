{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert.jsx","components/PostForm.jsx","components/Post.jsx","components/Posts.jsx","components/Loader.jsx","components/FetchedPosts.jsx","App.js","serviceWorker.js","redux/postsReducer.js","redux/appReduser.js","redux/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","alert","htmlFor","onChange","Component","connect","app","post","syncPosts","posts","length","map","Post","key","Loader","useDispatch","useSelector","fetchedPosts","loading","onClick","App","FetchedPosts","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","concat","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","word","includes","run","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aac76584.chunk.js","sourcesContent":["import {\r\n  CREATE_POST,\r\n  REQUEST_POSTS,\r\n  SHOW_LOADER,\r\n  HIDE_LOADER,\r\n  SHOW_ALERT,\r\n  HIDE_ALERT,\r\n} from \"./types\";\r\n\r\nexport function createPost(post) {\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: post,\r\n  };\r\n}\r\n\r\nexport function showLoader() {\r\n  return {\r\n    type: SHOW_LOADER,\r\n  };\r\n}\r\nexport function hideLoader() {\r\n  return {\r\n    type: HIDE_LOADER,\r\n  };\r\n}\r\n\r\nexport function showAlert(text) {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: text,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      dispatch(hideAlert());\r\n    }, 3000);\r\n  };\r\n}\r\nexport function hideAlert() {\r\n  return {\r\n    type: HIDE_ALERT,\r\n  };\r\n}\r\n\r\nexport function fetchPosts() {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n  };\r\n  // return async (dispatch) => {\r\n  //   try {\r\n  //     dispatch(showLoader());\r\n  //     const response = await fetch(\r\n  //       \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n  //     );\r\n  //     const json = await response.json();\r\n  //     dispatch({ type: FETCH_POSTS, payload: json });\r\n  //     dispatch(hideLoader());\r\n  //   } catch (error) {\r\n  //     dispatch(showAlert(\"Что-то пошло не так...\"));\r\n  //     dispatch(hideLoader());\r\n  //   }\r\n  // };\r\n}\r\n","export const CREATE_POST = \"POST/CREATE_POST\";\r\nexport const FETCH_POSTS = \"POST/FETCH_POSTS\";\r\nexport const REQUEST_POSTS = \"POST/REQUEST_POSTS\";\r\nexport const SHOW_LOADER = \"APP/SHOW_LOADER\";\r\nexport const HIDE_LOADER = \"APP/HIDE_LOADER\";\r\nexport const SHOW_ALERT = \"APP/SHOW_ALERT\";\r\nexport const HIDE_ALERT = \"APP/HIDE_ALERT\";\r\n","import React from \"react\";\r\n\r\nexport const Alert = ({ text }) => {\r\n  return (\r\n    <div className=\"alert alert-warning\" role=\"alert\">\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost, showAlert } from \"../redux/actions\";\r\nimport { Alert } from \"./Alert\";\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n    };\r\n  }\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { title } = this.state;\r\n\r\n    if (!title.trim()) {\r\n      return this.props.showAlert(\"Название поста не может быть пустым\");\r\n    }\r\n\r\n    const newPost = {\r\n      title,\r\n      id: Date.now().toString(),\r\n    };\r\n\r\n    this.props.createPost(newPost); // ac from redux\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  changeInputHandler = (event) => {\r\n    event.persist();\r\n    this.setState((prev) => ({\r\n      ...prev,\r\n      ...{\r\n        [event.target.name]: event.target.value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitHandler}>\r\n        {this.props.alert && <Alert text={this.props.alert} />}\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"title\">Заголовок поста</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            value={this.state.title}\r\n            name=\"title\"\r\n            onChange={this.changeInputHandler}\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-success\" type=\"submit\">\r\n          Создать\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  alert: state.app.alert,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  createPost,\r\n  showAlert,\r\n})(PostForm);\r\n","import React from \"react\";\r\n\r\nexport default ({ post }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{post.title}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Posts = ({ syncPosts }) => {\r\n  if (!syncPosts.length) {\r\n    return <p className=\"text-center\">Постов пока нет</p>;\r\n  }\r\n  return syncPosts.map((post) => <Post post={post} key={post.id} />);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    syncPosts: state.posts.posts,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Posts);\r\n","import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"spinner-border\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Post from \"./Post\";\r\nimport { fetchPosts } from \"../redux/actions\";\r\nimport Loader from \"./Loader\";\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state) => state.posts.fetchedPosts);\r\n  const loading = useSelector((state) => state.app.loading);\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (!posts.length) {\r\n    return (\r\n      <button\r\n        onClick={() => dispatch(fetchPosts())}\r\n        className=\"btn btn-primary\"\r\n      >\r\n        Загрузить\r\n      </button>\r\n    );\r\n  }\r\n  return posts.map((post) => <Post post={post} key={post.id} />);\r\n};\r\n","import React from \"react\";\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\nimport FetchedPosts from \"./components/FetchedPosts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-5\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Синхронные посты</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h2>Асинхронные посты</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE_POST, FETCH_POSTS } from \"./types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchedPosts: [],\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case CREATE_POST:\r\n      return { ...state, posts: state.posts.concat([payload]) };\r\n    case FETCH_POSTS:\r\n      return { ...state, fetchedPosts: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  alert: null,\r\n};\r\n\r\nexport const appReduser = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SHOW_LOADER:\r\n      return { ...state, loading: true };\r\n    case HIDE_LOADER:\r\n      return { ...state, loading: false };\r\n    case SHOW_ALERT:\r\n      return { ...state, alert: action.payload };\r\n    case HIDE_ALERT:\r\n      return { ...state, alert: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { postsReducer } from \"./postsReducer\";\r\nimport { appReduser } from \"./appReduser\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  app: appReduser,\r\n});\r\n","import { CREATE_POST } from \"./types\";\r\nimport { showAlert } from \"./actions\";\r\n\r\nconst forbidden = [\"fuck\", \"spam\", \"php\"];\r\n\r\nexport function forbiddenWordsMiddleware({ dispatch }) {\r\n  return function (next) {\r\n    return function (action) {\r\n      if (action.type === CREATE_POST) {\r\n        const found = forbidden.filter((word) =>\r\n          action.payload.title.includes(word)\r\n        );\r\n        if (found.length) {\r\n          return dispatch(showAlert(\"Спамер!\"));\r\n        }\r\n      }\r\n      return next(action);\r\n    };\r\n  };\r\n}\r\n","import { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { REQUEST_POSTS, FETCH_POSTS } from \"./types\";\r\nimport { showLoader, hideLoader, showAlert } from \"./actions\";\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(REQUEST_POSTS, sagaWorker);\r\n}\r\n\r\nfunction* sagaWorker() {\r\n  try {\r\n    yield put(showLoader());\r\n    const payload = yield call(fetchPosts);\r\n    yield put({ type: FETCH_POSTS, payload });\r\n    yield put(hideLoader());\r\n  } catch (error) {\r\n    yield put(showAlert(\"Что-то пошло не так...\"));\r\n    yield put(hideLoader());\r\n  }\r\n}\r\n\r\nasync function fetchPosts() {\r\n  const response = await fetch(\r\n    \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\r\n  );\r\n  return await response.json();\r\n}\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport thunk from \"redux-thunk\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { rootReducer } from \"./redux/rootReducer\";\nimport { forbiddenWordsMiddleware } from \"./redux/middleware\";\nimport { sagaWatcher } from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(thunk, forbiddenWordsMiddleware, saga))\n);\n\nsaga.run(sagaWatcher);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}